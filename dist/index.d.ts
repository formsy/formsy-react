import React from 'react';
import PropTypes from 'prop-types';
import validationRules from './validationRules';
import Wrapper, { propTypes } from './Wrapper';
import { IModel, InputComponent, IResetModel, ISetInputValue, IUpdateInputsWithError, ValidationFunction } from './interfaces';
declare type FormHTMLAttributesCleaned = Omit<React.FormHTMLAttributes<HTMLFormElement>, 'onChange' | 'onSubmit'>;
export interface FormsyProps extends FormHTMLAttributesCleaned {
    disabled: boolean;
    getErrorMessage: any;
    getErrorMessages: any;
    getValue: any;
    hasValue: any;
    isFormDisabled: any;
    isFormSubmitted: any;
    isPristine: any;
    isRequired: any;
    isValid: any;
    isValidValue: any;
    mapping: null | ((model: IModel) => IModel);
    onChange: (model: IModel, isChanged: boolean) => void;
    onError: any;
    onInvalid: () => void;
    onInvalidSubmit: any;
    onReset?: () => void;
    onSubmit?: (model: IModel, resetModel: IResetModel, updateInputsWithError: IUpdateInputsWithError, event: React.SyntheticEvent) => void;
    onValid: () => void;
    onValidSubmit?: (model: IModel, resetModel: IResetModel, updateInputsWithError: IUpdateInputsWithError, event: React.SyntheticEvent) => void;
    preventExternalInvalidation?: boolean;
    resetValue: any;
    setValidations: any;
    setValue: any;
    showError: any;
    showRequired: any;
    validationErrors?: null | object;
}
export interface FormsyState {
    canChange: boolean;
    formSubmitted?: boolean;
    isPristine?: boolean;
    isSubmitting: boolean;
    isValid: boolean;
}
declare class Formsy extends React.Component<FormsyProps, FormsyState> {
    inputs: any[];
    emptyArray: any[];
    prevInputNames: any[] | null;
    static displayName: string;
    static propTypes: {
        disabled: PropTypes.Requireable<boolean>;
        getErrorMessage: PropTypes.Requireable<(...args: any[]) => any>;
        getErrorMessages: PropTypes.Requireable<(...args: any[]) => any>;
        getValue: PropTypes.Requireable<(...args: any[]) => any>;
        hasValue: PropTypes.Requireable<(...args: any[]) => any>;
        isFormDisabled: PropTypes.Requireable<(...args: any[]) => any>;
        isFormSubmitted: PropTypes.Requireable<(...args: any[]) => any>;
        isPristine: PropTypes.Requireable<(...args: any[]) => any>;
        isRequired: PropTypes.Requireable<(...args: any[]) => any>;
        isValid: PropTypes.Requireable<(...args: any[]) => any>;
        isValidValue: PropTypes.Requireable<(...args: any[]) => any>;
        mapping: PropTypes.Requireable<(...args: any[]) => any>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        onInvalid: PropTypes.Requireable<(...args: any[]) => any>;
        onInvalidSubmit: PropTypes.Requireable<(...args: any[]) => any>;
        onReset: PropTypes.Requireable<(...args: any[]) => any>;
        onSubmit: PropTypes.Requireable<(...args: any[]) => any>;
        onValid: PropTypes.Requireable<(...args: any[]) => any>;
        onValidSubmit: PropTypes.Requireable<(...args: any[]) => any>;
        preventExternalInvalidation: PropTypes.Requireable<boolean>;
        resetValue: PropTypes.Requireable<(...args: any[]) => any>;
        setValidations: PropTypes.Requireable<(...args: any[]) => any>;
        setValue: PropTypes.Requireable<(...args: any[]) => any>;
        showError: PropTypes.Requireable<(...args: any[]) => any>;
        showRequired: PropTypes.Requireable<(...args: any[]) => any>;
        validationErrors: PropTypes.Requireable<object>;
    };
    static childContextTypes: {
        formsy: PropTypes.Requireable<object>;
    };
    static defaultProps: Partial<FormsyProps>;
    constructor(props: FormsyProps);
    getChildContext: () => {
        formsy: {
            attachToForm: (component: any) => void;
            detachFromForm: (component: InputComponent) => void;
            isFormDisabled: boolean;
            isValidValue: (component: any, value: any) => Promise<boolean>;
            validate: (component: InputComponent) => void;
        };
    };
    componentDidMount: () => void;
    componentDidUpdate: (prevProps: any) => void;
    getCurrentValues: () => any;
    getModel: () => any;
    getPristineValues: () => any;
    setFormPristine: (isPristine: boolean) => void;
    onValidationComplete: () => void;
    setInputValidationErrors: (errors: any) => void;
    setFormValidState: (allIsValid: boolean) => void;
    isValidValue: (component: any, value: any) => Promise<boolean>;
    isFormDisabled: () => boolean;
    mapModel: (model: any) => any;
    reset: (data?: any) => void;
    resetInternal: (event: any) => void;
    resetModel: IResetModel;
    setValue: ISetInputValue;
    runValidation: (component: InputComponent, value?: any) => Promise<{
        isRequired: boolean;
        isValid: boolean;
        error: any;
    }>;
    attachToForm: (component: any) => void;
    detachFromForm: (component: InputComponent) => void;
    isChanged: () => boolean;
    submit: (event: any) => void;
    updateInputsWithError: IUpdateInputsWithError;
    validate: (component: InputComponent) => void;
    /**
     * returns validations array after async validation on each input is resolved
     */
    runValidationOnAllInputs: () => Promise<any[]>;
    validateForm: () => void;
    render: () => React.DetailedReactHTMLElement<{
        disabled: boolean;
        onError: any;
        hidden?: boolean;
        dir?: string;
        slot?: string;
        style?: React.CSSProperties;
        title?: string;
        color?: string;
        children?: React.ReactNode;
        name?: string;
        acceptCharset?: string;
        action?: string;
        autoComplete?: string;
        encType?: string;
        method?: string;
        noValidate?: boolean;
        target?: string;
        defaultChecked?: boolean;
        defaultValue?: string | number | string[];
        suppressContentEditableWarning?: boolean;
        suppressHydrationWarning?: boolean;
        accessKey?: string;
        className?: string;
        contentEditable?: boolean;
        contextMenu?: string;
        draggable?: boolean;
        id?: string;
        lang?: string;
        placeholder?: string;
        spellCheck?: boolean;
        tabIndex?: number;
        radioGroup?: string;
        role?: string;
        about?: string;
        datatype?: string;
        inlist?: any;
        prefix?: string;
        property?: string;
        resource?: string;
        typeof?: string;
        vocab?: string;
        autoCapitalize?: string;
        autoCorrect?: string;
        autoSave?: string;
        itemProp?: string;
        itemScope?: boolean;
        itemType?: string;
        itemID?: string;
        itemRef?: string;
        results?: number;
        security?: string;
        unselectable?: "on" | "off";
        inputMode?: "search" | "none" | "text" | "decimal" | "numeric" | "tel" | "url" | "email";
        is?: string;
        'aria-activedescendant'?: string;
        'aria-atomic'?: boolean | "false" | "true";
        'aria-autocomplete'?: "none" | "both" | "inline" | "list";
        'aria-busy'?: boolean | "false" | "true";
        'aria-checked'?: boolean | "mixed" | "false" | "true";
        'aria-colcount'?: number;
        'aria-colindex'?: number;
        'aria-colspan'?: number;
        'aria-controls'?: string;
        'aria-current'?: boolean | "time" | "page" | "false" | "true" | "step" | "location" | "date";
        'aria-describedby'?: string;
        'aria-details'?: string;
        'aria-disabled'?: boolean | "false" | "true";
        'aria-dropeffect'?: "link" | "none" | "copy" | "move" | "execute" | "popup";
        'aria-errormessage'?: string;
        'aria-expanded'?: boolean | "false" | "true";
        'aria-flowto'?: string;
        'aria-grabbed'?: boolean | "false" | "true";
        'aria-haspopup'?: boolean | "dialog" | "menu" | "listbox" | "grid" | "false" | "true" | "tree";
        'aria-hidden'?: boolean | "false" | "true";
        'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling";
        'aria-keyshortcuts'?: string;
        'aria-label'?: string;
        'aria-labelledby'?: string;
        'aria-level'?: number;
        'aria-live'?: "off" | "assertive" | "polite";
        'aria-modal'?: boolean | "false" | "true";
        'aria-multiline'?: boolean | "false" | "true";
        'aria-multiselectable'?: boolean | "false" | "true";
        'aria-orientation'?: "horizontal" | "vertical";
        'aria-owns'?: string;
        'aria-placeholder'?: string;
        'aria-posinset'?: number;
        'aria-pressed'?: boolean | "mixed" | "false" | "true";
        'aria-readonly'?: boolean | "false" | "true";
        'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals";
        'aria-required'?: boolean | "false" | "true";
        'aria-roledescription'?: string;
        'aria-rowcount'?: number;
        'aria-rowindex'?: number;
        'aria-rowspan'?: number;
        'aria-selected'?: boolean | "false" | "true";
        'aria-setsize'?: number;
        'aria-sort'?: "none" | "ascending" | "descending" | "other";
        'aria-valuemax'?: number;
        'aria-valuemin'?: number;
        'aria-valuenow'?: number;
        'aria-valuetext'?: string;
        dangerouslySetInnerHTML?: {
            __html: string;
        };
        onCopy?: (event: React.ClipboardEvent<HTMLFormElement>) => void;
        onCopyCapture?: (event: React.ClipboardEvent<HTMLFormElement>) => void;
        onCut?: (event: React.ClipboardEvent<HTMLFormElement>) => void;
        onCutCapture?: (event: React.ClipboardEvent<HTMLFormElement>) => void;
        onPaste?: (event: React.ClipboardEvent<HTMLFormElement>) => void;
        onPasteCapture?: (event: React.ClipboardEvent<HTMLFormElement>) => void;
        onCompositionEnd?: (event: React.CompositionEvent<HTMLFormElement>) => void;
        onCompositionEndCapture?: (event: React.CompositionEvent<HTMLFormElement>) => void;
        onCompositionStart?: (event: React.CompositionEvent<HTMLFormElement>) => void;
        onCompositionStartCapture?: (event: React.CompositionEvent<HTMLFormElement>) => void;
        onCompositionUpdate?: (event: React.CompositionEvent<HTMLFormElement>) => void;
        onCompositionUpdateCapture?: (event: React.CompositionEvent<HTMLFormElement>) => void;
        onFocus?: (event: React.FocusEvent<HTMLFormElement>) => void;
        onFocusCapture?: (event: React.FocusEvent<HTMLFormElement>) => void;
        onBlur?: (event: React.FocusEvent<HTMLFormElement>) => void;
        onBlurCapture?: (event: React.FocusEvent<HTMLFormElement>) => void;
        onChangeCapture?: (event: React.FormEvent<HTMLFormElement>) => void;
        onBeforeInput?: (event: React.FormEvent<HTMLFormElement>) => void;
        onBeforeInputCapture?: (event: React.FormEvent<HTMLFormElement>) => void;
        onInput?: (event: React.FormEvent<HTMLFormElement>) => void;
        onInputCapture?: (event: React.FormEvent<HTMLFormElement>) => void;
        onResetCapture?: (event: React.FormEvent<HTMLFormElement>) => void;
        onSubmitCapture?: (event: React.FormEvent<HTMLFormElement>) => void;
        onInvalidCapture?: (event: React.FormEvent<HTMLFormElement>) => void;
        onLoad?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onLoadCapture?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onErrorCapture?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onKeyDown?: (event: React.KeyboardEvent<HTMLFormElement>) => void;
        onKeyDownCapture?: (event: React.KeyboardEvent<HTMLFormElement>) => void;
        onKeyPress?: (event: React.KeyboardEvent<HTMLFormElement>) => void;
        onKeyPressCapture?: (event: React.KeyboardEvent<HTMLFormElement>) => void;
        onKeyUp?: (event: React.KeyboardEvent<HTMLFormElement>) => void;
        onKeyUpCapture?: (event: React.KeyboardEvent<HTMLFormElement>) => void;
        onAbort?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onAbortCapture?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onCanPlay?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onCanPlayCapture?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onCanPlayThrough?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onCanPlayThroughCapture?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onDurationChange?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onDurationChangeCapture?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onEmptied?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onEmptiedCapture?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onEncrypted?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onEncryptedCapture?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onEnded?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onEndedCapture?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onLoadedData?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onLoadedDataCapture?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onLoadedMetadata?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onLoadedMetadataCapture?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onLoadStart?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onLoadStartCapture?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onPause?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onPauseCapture?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onPlay?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onPlayCapture?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onPlaying?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onPlayingCapture?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onProgress?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onProgressCapture?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onRateChange?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onRateChangeCapture?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onSeeked?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onSeekedCapture?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onSeeking?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onSeekingCapture?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onStalled?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onStalledCapture?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onSuspend?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onSuspendCapture?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onTimeUpdate?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onTimeUpdateCapture?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onVolumeChange?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onVolumeChangeCapture?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onWaiting?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onWaitingCapture?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onAuxClick?: (event: React.MouseEvent<HTMLFormElement, MouseEvent>) => void;
        onAuxClickCapture?: (event: React.MouseEvent<HTMLFormElement, MouseEvent>) => void;
        onClick?: (event: React.MouseEvent<HTMLFormElement, MouseEvent>) => void;
        onClickCapture?: (event: React.MouseEvent<HTMLFormElement, MouseEvent>) => void;
        onContextMenu?: (event: React.MouseEvent<HTMLFormElement, MouseEvent>) => void;
        onContextMenuCapture?: (event: React.MouseEvent<HTMLFormElement, MouseEvent>) => void;
        onDoubleClick?: (event: React.MouseEvent<HTMLFormElement, MouseEvent>) => void;
        onDoubleClickCapture?: (event: React.MouseEvent<HTMLFormElement, MouseEvent>) => void;
        onDrag?: (event: React.DragEvent<HTMLFormElement>) => void;
        onDragCapture?: (event: React.DragEvent<HTMLFormElement>) => void;
        onDragEnd?: (event: React.DragEvent<HTMLFormElement>) => void;
        onDragEndCapture?: (event: React.DragEvent<HTMLFormElement>) => void;
        onDragEnter?: (event: React.DragEvent<HTMLFormElement>) => void;
        onDragEnterCapture?: (event: React.DragEvent<HTMLFormElement>) => void;
        onDragExit?: (event: React.DragEvent<HTMLFormElement>) => void;
        onDragExitCapture?: (event: React.DragEvent<HTMLFormElement>) => void;
        onDragLeave?: (event: React.DragEvent<HTMLFormElement>) => void;
        onDragLeaveCapture?: (event: React.DragEvent<HTMLFormElement>) => void;
        onDragOver?: (event: React.DragEvent<HTMLFormElement>) => void;
        onDragOverCapture?: (event: React.DragEvent<HTMLFormElement>) => void;
        onDragStart?: (event: React.DragEvent<HTMLFormElement>) => void;
        onDragStartCapture?: (event: React.DragEvent<HTMLFormElement>) => void;
        onDrop?: (event: React.DragEvent<HTMLFormElement>) => void;
        onDropCapture?: (event: React.DragEvent<HTMLFormElement>) => void;
        onMouseDown?: (event: React.MouseEvent<HTMLFormElement, MouseEvent>) => void;
        onMouseDownCapture?: (event: React.MouseEvent<HTMLFormElement, MouseEvent>) => void;
        onMouseEnter?: (event: React.MouseEvent<HTMLFormElement, MouseEvent>) => void;
        onMouseLeave?: (event: React.MouseEvent<HTMLFormElement, MouseEvent>) => void;
        onMouseMove?: (event: React.MouseEvent<HTMLFormElement, MouseEvent>) => void;
        onMouseMoveCapture?: (event: React.MouseEvent<HTMLFormElement, MouseEvent>) => void;
        onMouseOut?: (event: React.MouseEvent<HTMLFormElement, MouseEvent>) => void;
        onMouseOutCapture?: (event: React.MouseEvent<HTMLFormElement, MouseEvent>) => void;
        onMouseOver?: (event: React.MouseEvent<HTMLFormElement, MouseEvent>) => void;
        onMouseOverCapture?: (event: React.MouseEvent<HTMLFormElement, MouseEvent>) => void;
        onMouseUp?: (event: React.MouseEvent<HTMLFormElement, MouseEvent>) => void;
        onMouseUpCapture?: (event: React.MouseEvent<HTMLFormElement, MouseEvent>) => void;
        onSelect?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onSelectCapture?: (event: React.SyntheticEvent<HTMLFormElement, Event>) => void;
        onTouchCancel?: (event: React.TouchEvent<HTMLFormElement>) => void;
        onTouchCancelCapture?: (event: React.TouchEvent<HTMLFormElement>) => void;
        onTouchEnd?: (event: React.TouchEvent<HTMLFormElement>) => void;
        onTouchEndCapture?: (event: React.TouchEvent<HTMLFormElement>) => void;
        onTouchMove?: (event: React.TouchEvent<HTMLFormElement>) => void;
        onTouchMoveCapture?: (event: React.TouchEvent<HTMLFormElement>) => void;
        onTouchStart?: (event: React.TouchEvent<HTMLFormElement>) => void;
        onTouchStartCapture?: (event: React.TouchEvent<HTMLFormElement>) => void;
        onPointerDown?: (event: React.PointerEvent<HTMLFormElement>) => void;
        onPointerDownCapture?: (event: React.PointerEvent<HTMLFormElement>) => void;
        onPointerMove?: (event: React.PointerEvent<HTMLFormElement>) => void;
        onPointerMoveCapture?: (event: React.PointerEvent<HTMLFormElement>) => void;
        onPointerUp?: (event: React.PointerEvent<HTMLFormElement>) => void;
        onPointerUpCapture?: (event: React.PointerEvent<HTMLFormElement>) => void;
        onPointerCancel?: (event: React.PointerEvent<HTMLFormElement>) => void;
        onPointerCancelCapture?: (event: React.PointerEvent<HTMLFormElement>) => void;
        onPointerEnter?: (event: React.PointerEvent<HTMLFormElement>) => void;
        onPointerEnterCapture?: (event: React.PointerEvent<HTMLFormElement>) => void;
        onPointerLeave?: (event: React.PointerEvent<HTMLFormElement>) => void;
        onPointerLeaveCapture?: (event: React.PointerEvent<HTMLFormElement>) => void;
        onPointerOver?: (event: React.PointerEvent<HTMLFormElement>) => void;
        onPointerOverCapture?: (event: React.PointerEvent<HTMLFormElement>) => void;
        onPointerOut?: (event: React.PointerEvent<HTMLFormElement>) => void;
        onPointerOutCapture?: (event: React.PointerEvent<HTMLFormElement>) => void;
        onGotPointerCapture?: (event: React.PointerEvent<HTMLFormElement>) => void;
        onGotPointerCaptureCapture?: (event: React.PointerEvent<HTMLFormElement>) => void;
        onLostPointerCapture?: (event: React.PointerEvent<HTMLFormElement>) => void;
        onLostPointerCaptureCapture?: (event: React.PointerEvent<HTMLFormElement>) => void;
        onScroll?: (event: React.UIEvent<HTMLFormElement>) => void;
        onScrollCapture?: (event: React.UIEvent<HTMLFormElement>) => void;
        onWheel?: (event: React.WheelEvent<HTMLFormElement>) => void;
        onWheelCapture?: (event: React.WheelEvent<HTMLFormElement>) => void;
        onAnimationStart?: (event: React.AnimationEvent<HTMLFormElement>) => void;
        onAnimationStartCapture?: (event: React.AnimationEvent<HTMLFormElement>) => void;
        onAnimationEnd?: (event: React.AnimationEvent<HTMLFormElement>) => void;
        onAnimationEndCapture?: (event: React.AnimationEvent<HTMLFormElement>) => void;
        onAnimationIteration?: (event: React.AnimationEvent<HTMLFormElement>) => void;
        onAnimationIterationCapture?: (event: React.AnimationEvent<HTMLFormElement>) => void;
        onTransitionEnd?: (event: React.TransitionEvent<HTMLFormElement>) => void;
        onTransitionEndCapture?: (event: React.TransitionEvent<HTMLFormElement>) => void;
        onReset: (event: any) => void;
        onSubmit: (event: any) => void;
    }, HTMLElement>;
}
declare const addValidationRule: (name: string, func: ValidationFunction) => void;
export { addValidationRule, propTypes, validationRules, Wrapper as withFormsy };
export default Formsy;
