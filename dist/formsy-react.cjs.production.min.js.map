{"version":3,"file":"formsy-react.cjs.production.min.js","sources":["../src/utils.ts","../src/validationRules.ts","../src/FormsyContext.ts","../src/withFormsy.ts","../src/Formsy.ts"],"sourcesContent":["import { isPlainObject } from 'lodash';\n\nimport { ValidationError, Validations, Values } from './interfaces';\n\nexport function isArray(value: unknown): value is unknown[] {\n  return Array.isArray(value);\n}\n\nexport function isObject(value: unknown): value is object {\n  return isPlainObject(value);\n}\n\nexport function isTypeUndefined(value: unknown): value is undefined {\n  return typeof value === 'undefined';\n}\n\nexport function isDate(value: unknown): value is Date {\n  return value instanceof Date;\n}\n\nexport function isFunction(value: unknown): value is Function {\n  return value !== null && typeof value === 'function';\n}\n\nexport function isString(value: unknown): value is string {\n  return typeof value === 'string';\n}\n\nexport function isNumber(value: unknown): value is number {\n  return typeof value === 'number';\n}\n\nexport function isRegex(value: unknown): value is RegExp {\n  return value instanceof RegExp;\n}\n\nexport function isValueStringEmpty(value: string): boolean {\n  return value === '';\n}\n\nexport function isValueNullOrUndefined(value: unknown): boolean {\n  return value === null || value === undefined;\n}\n\nexport function isValueUndefined(value: unknown): boolean {\n  return value === undefined;\n}\n\nexport function noop() {\n  // do nothing.\n}\n\nexport function protectAgainstParamReassignment(value: unknown) {\n  // Clone objects to avoid accidental param reassignment\n  if (isObject(value)) return { ...value };\n  if (isArray(value)) return [...value];\n  return value;\n}\n\nexport function isSame(a: unknown, b: unknown) {\n  if (typeof a !== typeof b) {\n    return false;\n  }\n\n  if (isArray(a) && isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    return a.every((item, index) => isSame(item, b[index]));\n  }\n\n  if (isFunction(a) && isFunction(b)) {\n    return a.toString() === b.toString();\n  }\n\n  if (isDate(a) && isDate(b)) {\n    return a.toString() === b.toString();\n  }\n\n  if (isObject(a) && isObject(b)) {\n    if (Object.keys(a).length !== Object.keys(b).length) {\n      return false;\n    }\n\n    return Object.keys(a).every((key) => isSame(a[key], b[key]));\n  }\n\n  if (isRegex(a) && isRegex(b)) {\n    return a.toString() === b.toString();\n  }\n\n  return a === b;\n}\n\ninterface RulesResult {\n  errors: ValidationError[];\n  failed: string[];\n  success: string[];\n}\n\nexport function runRules<V>(\n  value: V,\n  currentValues: Values,\n  validations: Validations<V>,\n  validationRules: Validations<V>,\n) {\n  const results: RulesResult = {\n    errors: [],\n    failed: [],\n    success: [],\n  };\n\n  Object.keys(validations).forEach((validationName) => {\n    const validationsVal = validations[validationName];\n    const validationRulesVal = validationRules[validationName];\n    const addToResults = (validation) => {\n      if (isString(validation)) {\n        results.errors.push(validation);\n        results.failed.push(validationName);\n      } else if (!validation) {\n        results.failed.push(validationName);\n      } else {\n        results.success.push(validationName);\n      }\n    };\n\n    if (validationRulesVal && isFunction(validationsVal)) {\n      throw new Error(`Formsy does not allow you to override default validations: ${validationName}`);\n    }\n\n    if (!validationRulesVal && !isFunction(validationsVal)) {\n      throw new Error(`Formsy does not have the validation rule: ${validationName}`);\n    }\n\n    if (isFunction(validationsVal)) {\n      return addToResults(validationsVal(currentValues, value));\n    }\n\n    return addToResults(validationRulesVal(currentValues, value, validationsVal));\n  });\n\n  return results;\n}\n\nexport function debounce(callback, timeout: number) {\n  let timer;\n  return (...args) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      callback.apply(this, args);\n    }, timeout);\n  };\n}\n","import { ValidationFunction, Values } from './interfaces';\nimport {\n  isNumber,\n  isString,\n  isTypeUndefined,\n  isValueNullOrUndefined,\n  isValueStringEmpty,\n  isValueUndefined,\n} from './utils';\n\nexport function isExisty<V>(value: V) {\n  return !isValueNullOrUndefined(value);\n}\n\nexport function isEmpty<V>(value: V) {\n  if (isString(value)) {\n    return isValueStringEmpty(value);\n  }\n  if (isTypeUndefined(value)) {\n    return false;\n  }\n  return isValueUndefined(value);\n}\n\nexport function isDefaultRequiredValue(value: unknown) {\n  return isString(value) ? isValueStringEmpty(value) : isValueNullOrUndefined(value);\n}\n\nexport function matchRegexp<V>(_values: Values, value: V, regexp: RegExp) {\n  return !isExisty(value) || isEmpty(value) || regexp.test(`${value}`);\n}\n\ninterface Validations<V> {\n  [key: string]: ValidationFunction<V>;\n}\n\nconst REGEX_PATTERNS = {\n  ALPHA: /^[A-Z]+$/i,\n  ALPHANUMERIC: /^[0-9A-Z]+$/i,\n  EMAIL:\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/i, // from http://emailregex.com/\n  FLOAT: /^(?:[-+]?(?:\\d+))?(?:\\.\\d*)?(?:[eE][+-]?(?:\\d+))?$/,\n  INT: /^(?:[-+]?(?:0|[1-9]\\d*))$/,\n  NUMERIC: /^[-+]?(?:\\d*[.])?\\d+$/,\n  SPECIAL_WORDS: /^[\\sA-ZÀ-ÖØ-öø-ÿ]+$/i,\n  URL: /^(?:\\w+:)?\\/\\/([^\\s.]+\\.\\S{2}|localhost[:?\\d]*)\\S*$/i,\n  WORDS: /^[A-Z\\s]+$/i,\n};\n\nconst validations: Validations<any> = {\n  equals: <V>(_values, value: V, eql: V) => !isExisty(value) || isEmpty(value) || value === eql,\n  equalsField: <V>(values, value: V, field: string) => value === values[field],\n  isAlpha: <V>(values, value: V) => matchRegexp(values, value, REGEX_PATTERNS.ALPHA),\n  isAlphanumeric: <V>(values, value: V) => matchRegexp(values, value, REGEX_PATTERNS.ALPHANUMERIC),\n  isDefaultRequiredValue: <V>(_values, value: V) => isDefaultRequiredValue(value),\n  isEmail: (values, value: string) => matchRegexp(values, value, REGEX_PATTERNS.EMAIL),\n  isEmptyString: (_values, value: string) => isEmpty(value),\n  isExisty: <V>(_values, value: V) => isExisty(value),\n  isFalse: (_values, value: boolean | string) => value === false,\n  isFloat: <V>(values, value: V) => matchRegexp(values, value, REGEX_PATTERNS.FLOAT),\n  isInt: <V>(values, value: V) => matchRegexp(values, value, REGEX_PATTERNS.INT),\n  isLength: (_values, value: string, length: number) => !isExisty(value) || isEmpty(value) || value.length === length,\n  isNumeric: <V>(values, value: V) => isNumber(value) || matchRegexp(values, value, REGEX_PATTERNS.NUMERIC),\n  isSpecialWords: <V>(values, value: V) => matchRegexp(values, value, REGEX_PATTERNS.SPECIAL_WORDS),\n  isTrue: (_values, value: boolean | string) => value === true,\n  isUndefined: <V>(_values, value: V) => isValueUndefined(value),\n  isUrl: <V>(values, value: V) => matchRegexp(values, value, REGEX_PATTERNS.URL),\n  isWords: <V>(values, value: V) => matchRegexp(values, value, REGEX_PATTERNS.WORDS),\n  matchRegexp,\n  maxLength: (_values, value: string, length: number) => !isExisty(value) || value.length <= length,\n  minLength: (_values, value: string, length: number) => !isExisty(value) || isEmpty(value) || value.length >= length,\n};\n\nexport const addValidationRule = <V>(name: string, func: ValidationFunction<V>) => {\n  validations[name] = func;\n};\n\nexport default validations;\n","import React from 'react';\nimport { FormsyContextInterface } from './interfaces';\n\nconst noFormsyErrorMessage = 'Could not find Formsy Context Provider. Did you use withFormsy outside <Formsy />?';\n\nconst throwNoFormsyProvider = () => {\n  // istanbul ignore next\n  throw new Error(noFormsyErrorMessage);\n};\n\nconst defaultValue = {\n  attachToForm: throwNoFormsyProvider,\n  detachFromForm: throwNoFormsyProvider,\n  isFormDisabled: true,\n  isValidValue: throwNoFormsyProvider,\n  validate: throwNoFormsyProvider,\n  runValidation: throwNoFormsyProvider,\n};\n\nexport default React.createContext<FormsyContextInterface>(defaultValue);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport FormsyContext from './FormsyContext';\nimport {\n  ComponentWithStaticAttributes,\n  FormsyContextInterface,\n  RequiredValidation,\n  ValidationError,\n  Validations,\n  WrappedComponentClass,\n} from './interfaces';\n\nimport * as utils from './utils';\nimport { isString } from './utils';\nimport { isDefaultRequiredValue } from './validationRules';\n\n/* eslint-disable react/default-props-match-prop-types */\n\nconst convertValidationsToObject = <V>(validations: false | Validations<V>): Validations<V> => {\n  if (isString(validations)) {\n    return validations.split(/,(?![^{[]*[}\\]])/g).reduce((validationsAccumulator, validation) => {\n      let args: string[] = validation.split(':');\n      const validateMethod: string = args.shift();\n\n      args = args.map((arg) => {\n        try {\n          return JSON.parse(arg);\n        } catch (e) {\n          return arg; // It is a string if it can not parse it\n        }\n      });\n\n      if (args.length > 1) {\n        throw new Error(\n          'Formsy does not support multiple args on string validations. Use object format of validations instead.',\n        );\n      }\n\n      // Avoid parameter reassignment\n      const validationsAccumulatorCopy: Validations<V> = { ...validationsAccumulator };\n      validationsAccumulatorCopy[validateMethod] = args.length ? args[0] : true;\n      return validationsAccumulatorCopy;\n    }, {});\n  }\n\n  return validations || {};\n};\n\nexport const propTypes = {\n  innerRef: PropTypes.func,\n  name: PropTypes.string.isRequired,\n  required: PropTypes.oneOfType([PropTypes.bool, PropTypes.object, PropTypes.string]),\n  validations: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  value: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n};\n\nexport interface WrapperProps<V> {\n  innerRef?: (ref: React.Ref<any>) => void;\n  name: string;\n  required?: RequiredValidation<V>;\n  validationError?: ValidationError;\n  validationErrors?: { [key: string]: ValidationError };\n  validations?: Validations<V>;\n  value?: V;\n}\n\nexport interface WrapperState<V> {\n  [key: string]: unknown;\n\n  formSubmitted: boolean;\n  isPristine: boolean;\n  isRequired: boolean;\n  isValid: boolean;\n  pristineValue: V;\n  validationError: ValidationError[];\n  value: V;\n}\n\nexport interface InjectedProps<V> {\n  errorMessage: ValidationError;\n  errorMessages: ValidationError[];\n  hasValue: boolean;\n  isFormDisabled: boolean;\n  isFormSubmitted: boolean;\n  isPristine: boolean;\n  isRequired: boolean;\n  isValid: boolean;\n  isValidValue: (value: V) => boolean;\n  ref?: React.Ref<any>;\n  resetValue: () => void;\n  setValidations: (validations: Validations<V>, required: RequiredValidation<V>) => void;\n  setValue: (value: V, validate?: boolean) => void;\n  showError: boolean;\n  showRequired: boolean;\n}\n\nexport interface WrapperInstanceMethods<V> {\n  getErrorMessage: () => null | ValidationError;\n  getErrorMessages: () => ValidationError[];\n  getValue: () => V;\n  isFormDisabled: () => boolean;\n  isFormSubmitted: () => boolean;\n  isValid: () => boolean;\n  isValidValue: (value: V) => boolean;\n  setValue: (value: V, validate?: boolean) => void;\n}\n\nexport type PassDownProps<V> = WrapperProps<V> & InjectedProps<V>;\n\nfunction getDisplayName(component: WrappedComponentClass) {\n  return component.displayName || component.name || (utils.isString(component) ? component : 'Component');\n}\n\nexport default function withFormsy<T, V>(\n  WrappedComponent: React.ComponentType<T & PassDownProps<V>>,\n): React.ComponentType<Omit<T & WrapperProps<V>, keyof InjectedProps<V>>> {\n  class WithFormsyWrapper\n    extends React.Component<T & WrapperProps<V> & FormsyContextInterface, WrapperState<V>>\n    implements WrapperInstanceMethods<V>\n  {\n    public validations?: Validations<V>;\n\n    public requiredValidations?: Validations<V>;\n\n    public static displayName = `Formsy(${getDisplayName(WrappedComponent)})`;\n\n    public static propTypes: any = propTypes;\n\n    public static defaultProps: any = {\n      innerRef: null,\n      required: false,\n      validationError: '',\n      validationErrors: {},\n      validations: null,\n      value: (WrappedComponent as ComponentWithStaticAttributes).defaultValue,\n    };\n\n    public constructor(props) {\n      super(props);\n      const { runValidation, validations, required, value } = props;\n\n      this.state = { value } as any;\n\n      this.setValidations(validations, required);\n\n      this.state = {\n        formSubmitted: false,\n        isPristine: true,\n        pristineValue: props.value,\n        value: props.value,\n        ...runValidation(this, props.value),\n      };\n    }\n\n    public componentDidMount() {\n      const { name, attachToForm } = this.props;\n\n      if (!name) {\n        throw new Error('Form Input requires a name property when used');\n      }\n\n      attachToForm(this);\n    }\n\n    public shouldComponentUpdate(nextProps, nextState) {\n      const { props, state } = this;\n      const isChanged = (a: object, b: object): boolean => Object.keys(a).some((k) => a[k] !== b[k]);\n      const isPropsChanged = isChanged(props, nextProps);\n      const isStateChanged = isChanged(state, nextState);\n\n      return isPropsChanged || isStateChanged;\n    }\n\n    public componentDidUpdate(prevProps) {\n      const { value, validations, required, validate } = this.props;\n\n      // If the value passed has changed, set it. If value is not passed it will\n      // internally update, and this will never run\n      if (!utils.isSame(value, prevProps.value)) {\n        this.setValue(value);\n      }\n\n      // If validations or required is changed, run a new validation\n      if (!utils.isSame(validations, prevProps.validations) || !utils.isSame(required, prevProps.required)) {\n        this.setValidations(validations, required);\n        validate(this);\n      }\n    }\n\n    // Detach it when component unmounts\n    public componentWillUnmount() {\n      const { detachFromForm } = this.props;\n      detachFromForm(this);\n    }\n\n    public getErrorMessage = (): ValidationError | null => {\n      const messages = this.getErrorMessages();\n      return messages.length ? messages[0] : null;\n    };\n\n    public getErrorMessages = (): ValidationError[] => {\n      const { validationError } = this.state;\n\n      if (!this.isValid() || this.showRequired()) {\n        return validationError || [];\n      }\n      return [];\n    };\n\n    // eslint-disable-next-line react/destructuring-assignment\n    public getValue = (): V => this.state.value;\n\n    public setValidations = (validations: Validations<V>, required: RequiredValidation<V>): void => {\n      // Add validations to the store itself as the props object can not be modified\n      this.validations = convertValidationsToObject(validations) || {};\n      this.requiredValidations =\n        required === true ? { isDefaultRequiredValue: required } : convertValidationsToObject(required);\n    };\n\n    // By default, we validate after the value has been set.\n    // A user can override this and pass a second parameter of `false` to skip validation.\n    public setValue = (value: V, validate = true): void => {\n      const { validate: validateForm } = this.props;\n\n      if (!validate) {\n        this.setState({ value });\n      } else {\n        this.setState(\n          {\n            value,\n            isPristine: false,\n          },\n          () => {\n            validateForm(this);\n          },\n        );\n      }\n    };\n\n    // eslint-disable-next-line react/destructuring-assignment\n    public hasValue = () => {\n      const { value } = this.state;\n      return isDefaultRequiredValue(value);\n    };\n\n    // eslint-disable-next-line react/destructuring-assignment\n    public isFormDisabled = (): boolean => this.props.isFormDisabled;\n\n    // eslint-disable-next-line react/destructuring-assignment\n    public isFormSubmitted = (): boolean => this.state.formSubmitted;\n\n    // eslint-disable-next-line react/destructuring-assignment\n    public isPristine = (): boolean => this.state.isPristine;\n\n    // eslint-disable-next-line react/destructuring-assignment\n    public isRequired = (): boolean => !!this.props.required;\n\n    // eslint-disable-next-line react/destructuring-assignment\n    public isValid = (): boolean => this.state.isValid;\n\n    // eslint-disable-next-line react/destructuring-assignment\n    public isValidValue = (value: V) => this.props.isValidValue(this, value);\n\n    public resetValue = () => {\n      const { pristineValue } = this.state;\n      const { validate } = this.props;\n\n      this.setState(\n        {\n          value: pristineValue,\n          isPristine: true,\n        },\n        () => {\n          validate(this);\n        },\n      );\n    };\n\n    public showError = (): boolean => !this.showRequired() && !this.isValid();\n\n    // eslint-disable-next-line react/destructuring-assignment\n    public showRequired = (): boolean => this.state.isRequired;\n\n    public render() {\n      const { innerRef } = this.props;\n      const propsForElement: T & PassDownProps<V> = {\n        ...this.props,\n        errorMessage: this.getErrorMessage(),\n        errorMessages: this.getErrorMessages(),\n        hasValue: this.hasValue(),\n        isFormDisabled: this.isFormDisabled(),\n        isFormSubmitted: this.isFormSubmitted(),\n        isPristine: this.isPristine(),\n        isRequired: this.isRequired(),\n        isValid: this.isValid(),\n        isValidValue: this.isValidValue,\n        resetValue: this.resetValue,\n        setValidations: this.setValidations,\n        setValue: this.setValue,\n        showError: this.showError(),\n        showRequired: this.showRequired(),\n        value: this.getValue(),\n      };\n\n      if (innerRef) {\n        propsForElement.ref = innerRef;\n      }\n\n      return React.createElement(WrappedComponent, propsForElement);\n    }\n  }\n\n  // eslint-disable-next-line react/display-name\n  return (props) =>\n    React.createElement(FormsyContext.Consumer, null, ((contextValue) => {\n      return React.createElement(WithFormsyWrapper, { ...props, ...contextValue });\n    }) as any);\n}\n","/* eslint-disable react/no-unused-state, react/default-props-match-prop-types */\nimport { get, has, set } from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport FormsyContext from './FormsyContext';\nimport {\n  FormsyContextInterface,\n  IModel,\n  InputComponent,\n  IResetModel,\n  IUpdateInputsWithError,\n  IUpdateInputsWithValue,\n  ValidationError,\n} from './interfaces';\nimport { debounce, isObject, isString } from './utils';\nimport * as utils from './utils';\nimport validationRules from './validationRules';\nimport { PassDownProps } from './withFormsy';\n\ntype FormHTMLAttributesCleaned = Omit<React.FormHTMLAttributes<HTMLFormElement>, 'onChange' | 'onSubmit'>;\n\ntype OnSubmitCallback = (\n  model: IModel,\n  resetModel: IResetModel,\n  updateInputsWithError: IUpdateInputsWithError,\n  event: React.SyntheticEvent<HTMLFormElement>,\n) => void;\n\ntype FormElementType =\n  | string\n  | React.ComponentType<{\n      onReset?: (e: React.SyntheticEvent) => void;\n      onSubmit?: (e: React.SyntheticEvent) => void;\n      disabled?: boolean;\n      children?: React.ReactChildren;\n    }>;\n\nexport interface FormsyProps extends FormHTMLAttributesCleaned {\n  disabled: boolean;\n  mapping: null | ((model: IModel) => IModel);\n  onChange: (model: IModel, isChanged: boolean) => void;\n  onInvalid: () => void;\n  onReset?: () => void;\n  onSubmit?: OnSubmitCallback;\n  onValidSubmit?: OnSubmitCallback;\n  onInvalidSubmit: OnSubmitCallback;\n  onValid: () => void;\n  preventDefaultSubmit?: boolean;\n  preventExternalInvalidation?: boolean;\n  validationErrors?: null | object;\n  formElement?: FormElementType;\n}\n\nexport interface FormsyState {\n  canChange: boolean;\n  contextValue: FormsyContextInterface;\n  formSubmitted?: boolean;\n  isPristine?: boolean;\n  isSubmitting: boolean;\n  isValid: boolean;\n}\n\nconst ONE_RENDER_FRAME = 66;\n\nexport class Formsy extends React.Component<FormsyProps, FormsyState> {\n  public inputs: InstanceType<any & PassDownProps<any>>[];\n\n  public emptyArray: any[];\n\n  public prevInputNames: any[] | null = null;\n\n  public static displayName = 'Formsy';\n\n  public static propTypes = {\n    disabled: PropTypes.bool,\n    mapping: PropTypes.func,\n    formElement: PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.func]),\n    onChange: PropTypes.func,\n    onInvalid: PropTypes.func,\n    onInvalidSubmit: PropTypes.func,\n    onReset: PropTypes.func,\n    onSubmit: PropTypes.func,\n    onValid: PropTypes.func,\n    onValidSubmit: PropTypes.func,\n    preventDefaultSubmit: PropTypes.bool,\n    preventExternalInvalidation: PropTypes.bool,\n    validationErrors: PropTypes.object, // eslint-disable-line\n  };\n\n  public static defaultProps: Partial<FormsyProps> = {\n    disabled: false,\n    mapping: null,\n    onChange: utils.noop,\n    onInvalid: utils.noop,\n    onInvalidSubmit: utils.noop,\n    onReset: utils.noop,\n    onSubmit: utils.noop,\n    onValid: utils.noop,\n    onValidSubmit: utils.noop,\n    preventDefaultSubmit: true,\n    preventExternalInvalidation: false,\n    validationErrors: {},\n    formElement: 'form',\n  };\n\n  private readonly debouncedValidateForm: () => void;\n\n  public constructor(props: FormsyProps) {\n    super(props);\n    this.state = {\n      canChange: false,\n      isSubmitting: false,\n      isValid: true,\n      contextValue: {\n        attachToForm: this.attachToForm,\n        detachFromForm: this.detachFromForm,\n        isFormDisabled: props.disabled,\n        isValidValue: this.isValidValue,\n        validate: this.validate,\n        runValidation: this.runValidation,\n      },\n    };\n    this.inputs = [];\n    this.emptyArray = [];\n    this.debouncedValidateForm = debounce(this.validateForm, ONE_RENDER_FRAME);\n  }\n\n  public componentDidMount = () => {\n    this.prevInputNames = this.inputs.map((component) => component.props.name);\n    this.validateForm();\n  };\n\n  public componentDidUpdate = (prevProps: FormsyProps) => {\n    const { validationErrors, disabled } = this.props;\n\n    if (validationErrors && isObject(validationErrors) && Object.keys(validationErrors).length > 0) {\n      this.setInputValidationErrors(validationErrors);\n    }\n\n    const newInputNames = this.inputs.map((component) => component.props.name);\n    if (this.prevInputNames && !utils.isSame(this.prevInputNames, newInputNames)) {\n      this.prevInputNames = newInputNames;\n      this.validateForm();\n    }\n\n    // Keep the disabled value in state/context the same as from props\n    if (disabled !== prevProps.disabled) {\n      // eslint-disable-next-line\n      this.setState((state) => ({\n        ...state,\n        contextValue: {\n          ...state.contextValue,\n          isFormDisabled: disabled,\n        },\n      }));\n    }\n  };\n\n  public getCurrentValues = () =>\n    this.inputs.reduce((valueAccumulator, component) => {\n      const {\n        props: { name },\n        state: { value },\n      } = component;\n      // eslint-disable-next-line no-param-reassign\n      valueAccumulator[name] = utils.protectAgainstParamReassignment(value);\n      return valueAccumulator;\n    }, {});\n\n  public getModel = () => {\n    const currentValues = this.getCurrentValues();\n    return this.mapModel(currentValues);\n  };\n\n  public getPristineValues = () =>\n    this.inputs.reduce((valueAccumulator, component) => {\n      const {\n        props: { name, value },\n      } = component;\n      // eslint-disable-next-line no-param-reassign\n      valueAccumulator[name] = utils.protectAgainstParamReassignment(value);\n      return valueAccumulator;\n    }, {});\n\n  public setFormPristine = (isPristine: boolean) => {\n    this.setState({\n      formSubmitted: !isPristine,\n    });\n\n    // Iterate through each component and set it as pristine\n    // or \"dirty\".\n    this.inputs.forEach((component) => {\n      component.setState({\n        formSubmitted: !isPristine,\n        isPristine,\n      });\n    });\n  };\n\n  public setInputValidationErrors = (errors) => {\n    const { preventExternalInvalidation } = this.props;\n    const { isValid } = this.state;\n\n    this.inputs.forEach((component) => {\n      const { name } = component.props;\n      component.setState({\n        isValid: !(name in errors),\n        validationError: isString(errors[name]) ? [errors[name]] : errors[name],\n      });\n    });\n    if (!preventExternalInvalidation && isValid) {\n      this.setFormValidState(false);\n    }\n  };\n\n  public setFormValidState = (allIsValid: boolean) => {\n    const { onValid, onInvalid } = this.props;\n\n    this.setState({\n      isValid: allIsValid,\n    });\n\n    if (allIsValid) {\n      onValid();\n    } else {\n      onInvalid();\n    }\n  };\n\n  public isValidValue = (component, value) => this.runValidation(component, value).isValid;\n\n  // eslint-disable-next-line react/destructuring-assignment\n  public isFormDisabled = () => this.props.disabled;\n\n  public mapModel = (model: IModel): IModel => {\n    const { mapping } = this.props;\n\n    if (mapping) {\n      return mapping(model);\n    }\n\n    const returnModel = {};\n    Object.keys(model).forEach((key) => {\n      set(returnModel, key, model[key]);\n    });\n    return returnModel;\n  };\n\n  public reset = (model?: IModel) => {\n    this.setFormPristine(true);\n    this.resetModel(model);\n  };\n\n  private resetInternal = (event) => {\n    const { onReset } = this.props;\n\n    event.preventDefault();\n    this.reset();\n    if (onReset) {\n      onReset();\n    }\n  };\n\n  // Reset each key in the model to the original / initial / specified value\n  private resetModel: IResetModel = (data) => {\n    this.inputs.forEach((component) => {\n      const { name } = component.props;\n      if (data && has(data, name)) {\n        component.setValue(get(data, name));\n      } else {\n        component.resetValue();\n      }\n    });\n    this.validateForm();\n  };\n\n  // Checks validation on current value or a passed value\n  public runValidation = <V>(\n    component: InputComponent<V>,\n    value = component.state.value,\n  ): { isRequired: boolean; isValid: boolean; validationError: ValidationError[] } => {\n    const { validationErrors } = this.props;\n    const { validationError, validationErrors: componentValidationErrors, name } = component.props;\n    const currentValues = this.getCurrentValues();\n    const validationResults = utils.runRules(value, currentValues, component.validations, validationRules);\n    const requiredResults = utils.runRules(value, currentValues, component.requiredValidations, validationRules);\n    const isRequired = Object.keys(component.requiredValidations).length ? !!requiredResults.success.length : false;\n    const isValid = !validationResults.failed.length && !(validationErrors && validationErrors[component.props.name]);\n\n    return {\n      isRequired,\n      isValid: isRequired ? false : isValid,\n      validationError: (() => {\n        if (isValid && !isRequired) {\n          return this.emptyArray;\n        }\n\n        if (validationResults.errors.length) {\n          return validationResults.errors;\n        }\n\n        if (validationErrors && validationErrors[name]) {\n          return isString(validationErrors[name]) ? [validationErrors[name]] : validationErrors[name];\n        }\n\n        if (isRequired) {\n          const error = componentValidationErrors[requiredResults.success[0]] || validationError;\n          return error ? [error] : null;\n        }\n\n        if (validationResults.failed.length) {\n          return validationResults.failed\n            .map((failed) => (componentValidationErrors[failed] ? componentValidationErrors[failed] : validationError))\n            .filter((x, pos, arr) => arr.indexOf(x) === pos); // remove duplicates\n        }\n\n        // This line is not reachable\n        // istanbul ignore next\n        return undefined;\n      })(),\n    };\n  };\n\n  // Method put on each input component to register\n  // itself to the form\n  public attachToForm = (component) => {\n    if (this.inputs.indexOf(component) === -1) {\n      this.inputs.push(component);\n    }\n\n    const { onChange } = this.props;\n    const { canChange } = this.state;\n\n    // Trigger onChange\n    if (canChange) {\n      onChange(this.getModel(), this.isChanged());\n    }\n\n    this.debouncedValidateForm();\n  };\n\n  // Method put on each input component to unregister\n  // itself from the form\n  public detachFromForm = <V>(component: InputComponent<V>) => {\n    this.inputs = this.inputs.filter((input) => input !== component);\n\n    this.debouncedValidateForm();\n  };\n\n  // Checks if the values have changed from their initial value\n  public isChanged = () => !utils.isSame(this.getPristineValues(), this.getCurrentValues());\n\n  // Update model, submit to url prop and send the model\n  public submit = (event?: React.SyntheticEvent<HTMLFormElement>) => {\n    const { onSubmit, onValidSubmit, onInvalidSubmit, preventDefaultSubmit } = this.props;\n    const { isValid } = this.state;\n\n    if (preventDefaultSubmit && event && event.preventDefault) {\n      event.preventDefault();\n    }\n\n    // Trigger form as not pristine.\n    // If any inputs have not been touched yet this will make them dirty\n    // so validation becomes visible (if based on isPristine)\n    this.setFormPristine(false);\n    const model = this.getModel();\n    onSubmit(model, this.resetModel, this.updateInputsWithError, event);\n\n    if (isValid) {\n      onValidSubmit(model, this.resetModel, this.updateInputsWithError, event);\n    } else {\n      onInvalidSubmit(model, this.resetModel, this.updateInputsWithError, event);\n    }\n  };\n\n  // Go through errors from server and grab the components\n  // stored in the inputs map. Change their state to invalid\n  // and set the serverError message\n  public updateInputsWithError: IUpdateInputsWithError = (errors, invalidate) => {\n    const { preventExternalInvalidation } = this.props;\n    const { isValid } = this.state;\n\n    Object.entries(errors).forEach(([name, error]) => {\n      const component = this.inputs.find((input) => input.props.name === name);\n      if (!component) {\n        throw new Error(\n          `You are trying to update an input that does not exist. Verify errors object with input names. ${JSON.stringify(\n            errors,\n          )}`,\n        );\n      }\n      component.setState({\n        isValid: preventExternalInvalidation,\n        validationError: utils.isString(error) ? [error] : error,\n      });\n    });\n\n    if (invalidate && isValid) {\n      this.setFormValidState(false);\n    }\n  };\n\n  // Set the value of components\n  public updateInputsWithValue: IUpdateInputsWithValue<any> = (data, validate) => {\n    this.inputs.forEach((component) => {\n      const { name } = component.props;\n      if (data && has(data, name)) {\n        component.setValue(get(data, name), validate);\n      }\n    });\n  };\n\n  // Use the binded values and the actual input value to\n  // validate the input and set its state. Then check the\n  // state of the form itself\n  public validate = <V>(component: InputComponent<V>) => {\n    const { onChange } = this.props;\n    const { canChange } = this.state;\n\n    // Trigger onChange\n    if (canChange) {\n      onChange(this.getModel(), this.isChanged());\n    }\n\n    const validationState = this.runValidation<V>(component);\n    // Run through the validations, split them up and call\n    // the validator IF there is a value or it is required\n    component.setState(validationState, this.validateForm);\n  };\n\n  // Validate the form by going through all child input components\n  // and check their state\n  public validateForm = () => {\n    // We need a callback as we are validating all inputs again. This will\n    // run when the last input has set its state\n    const onValidationComplete = () => {\n      const allIsValid = this.inputs.every((component) => component.state.isValid);\n\n      this.setFormValidState(allIsValid);\n\n      // Tell the form that it can start to trigger change events\n      this.setState({\n        canChange: true,\n      });\n    };\n\n    if (this.inputs.length === 0) {\n      onValidationComplete();\n    } else {\n      // Run validation again in case affected by other inputs. The\n      // last component validated will run the onValidationComplete callback\n      this.inputs.forEach((component, index) => {\n        const validationState = this.runValidation(component);\n        const isLastInput = index === this.inputs.length - 1;\n        const callback = isLastInput ? onValidationComplete : null;\n        component.setState(validationState, callback);\n      });\n    }\n  };\n\n  public render() {\n    const {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      children,\n      mapping,\n      onChange,\n      onInvalid,\n      onInvalidSubmit,\n      onReset,\n      onSubmit,\n      onValid,\n      onValidSubmit,\n      preventDefaultSubmit,\n      preventExternalInvalidation,\n      validationErrors,\n      disabled,\n      formElement,\n      ...nonFormsyProps\n    } = this.props;\n    const { contextValue } = this.state;\n\n    return React.createElement(\n      FormsyContext.Provider,\n      {\n        value: contextValue,\n      },\n      React.createElement(\n        formElement,\n        {\n          onReset: this.resetInternal,\n          onSubmit: this.submit,\n          ...nonFormsyProps,\n          disabled,\n        },\n        children,\n      ),\n    );\n  }\n}\n"],"names":["isArray","value","Array","isObject","isPlainObject","isDate","Date","isFunction","isString","isRegex","RegExp","isValueStringEmpty","isValueNullOrUndefined","isValueUndefined","undefined","noop","protectAgainstParamReassignment","isSame","a","b","length","every","item","index","toString","Object","keys","key","runRules","currentValues","validations","validationRules","results","errors","failed","success","forEach","validationName","validationsVal","validationRulesVal","addToResults","validation","push","Error","isExisty","isEmpty","isTypeUndefined","isDefaultRequiredValue","matchRegexp","_values","regexp","test","REGEX_PATTERNS","equals","eql","equalsField","values","field","isAlpha","isAlphanumeric","isEmail","isEmptyString","isFalse","isFloat","isInt","isLength","isNumeric","isNumber","isSpecialWords","isTrue","isUndefined","isUrl","isWords","maxLength","minLength","throwNoFormsyProvider","React","createContext","attachToForm","detachFromForm","isFormDisabled","isValidValue","validate","runValidation","convertValidationsToObject","split","reduce","validationsAccumulator","args","validateMethod","shift","map","arg","JSON","parse","e","validationsAccumulatorCopy","propTypes","innerRef","PropTypes","func","name","string","isRequired","required","oneOfType","bool","object","any","Formsy","props","_this","prevInputNames","inputs","component","validateForm","prevProps","validationErrors","disabled","setInputValidationErrors","newInputNames","utils","setState","state","contextValue","valueAccumulator","getCurrentValues","mapModel","isPristine","formSubmitted","preventExternalInvalidation","isValid","validationError","setFormValidState","allIsValid","onValid","onInvalid","model","mapping","returnModel","set","setFormPristine","resetModel","event","onReset","preventDefault","reset","data","has","setValue","get","resetValue","componentValidationErrors","validationResults","requiredResults","requiredValidations","emptyArray","error","filter","x","pos","arr","indexOf","canChange","onChange","getModel","isChanged","debouncedValidateForm","input","getPristineValues","onSubmit","onValidSubmit","onInvalidSubmit","preventDefaultSubmit","updateInputsWithError","invalidate","entries","find","stringify","validationState","onValidationComplete","isSubmitting","callback","timeout","timer","clearTimeout","setTimeout","apply","debounce","_inheritsLoose","render","this","children","formElement","nonFormsyProps","createElement","FormsyContext","Provider","resetInternal","submit","Component","WrappedComponent","WithFormsyWrapper","messages","getErrorMessages","showRequired","pristineValue","setValidations","_proto","componentDidMount","shouldComponentUpdate","nextProps","nextState","some","k","isPropsChanged","isStateChanged","componentDidUpdate","componentWillUnmount","propsForElement","errorMessage","getErrorMessage","errorMessages","hasValue","isFormSubmitted","showError","getValue","ref","displayName","defaultValue","Consumer"],"mappings":"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"}